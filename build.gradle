plugins {
    id "dev.architectury.loom" version "1.3-SNAPSHOT"
    id "maven-publish"
  //  id 'application'
  //  id 'org.openjfx.javafxplugin' version '0.0.13'
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group



java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
                "infinitysnow.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)

        dataGen{
            mod(mod_id)
        }
    }

    runConfigs.named("data").configure {
        programArg("--existing=" + file("src/main/resources").absolutePath)
        programArgs("--client", "--server")
    }
}

repositories {
    mavenCentral()

    maven {
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }

}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    // layered mappings - Mojmap names, parchment and QM docs and parameters
    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_mappings}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    }

    modRuntimeOnly("curse.maven:jade-324717:4973483")
  //  implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixinextras_version}"))
 //  implementation(include("io.github.llamalad7:mixinextras-forge:${project.mixinextras_version}"))
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"



}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}


jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
